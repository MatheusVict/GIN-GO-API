// Code generated by MockGen. DO NOT EDIT.
// Source: src/model/service/user_interface.go
//
// Generated by this command:
//
//	mockgen -source=src/model/service/user_interface.go -destination=src/test/mocks/user_service_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	errorsHandle "github.com/MatheusVict/User-Register-GO/src/configuration/errorsHandle"
	model "github.com/MatheusVict/User-Register-GO/src/model"
	gomock "go.uber.org/mock/gomock"
)

// MockUserDomainService is a mock of UserDomainService interface.
type MockUserDomainService struct {
	ctrl     *gomock.Controller
	recorder *MockUserDomainServiceMockRecorder
}

// MockUserDomainServiceMockRecorder is the mock recorder for MockUserDomainService.
type MockUserDomainServiceMockRecorder struct {
	mock *MockUserDomainService
}

// NewMockUserDomainService creates a new mock instance.
func NewMockUserDomainService(ctrl *gomock.Controller) *MockUserDomainService {
	mock := &MockUserDomainService{ctrl: ctrl}
	mock.recorder = &MockUserDomainServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDomainService) EXPECT() *MockUserDomainServiceMockRecorder {
	return m.recorder
}

// CreateUserService mocks base method.
func (m *MockUserDomainService) CreateUserService(userDomain model.UserDomainInterface) (model.UserDomainInterface, *errorsHandle.ErrorsHandle) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserService", userDomain)
	ret0, _ := ret[0].(model.UserDomainInterface)
	ret1, _ := ret[1].(*errorsHandle.ErrorsHandle)
	return ret0, ret1
}

// CreateUserService indicates an expected call of CreateUserService.
func (mr *MockUserDomainServiceMockRecorder) CreateUserService(userDomain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserService", reflect.TypeOf((*MockUserDomainService)(nil).CreateUserService), userDomain)
}

// DeleteUser mocks base method.
func (m *MockUserDomainService) DeleteUser(arg0 string) *errorsHandle.ErrorsHandle {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(*errorsHandle.ErrorsHandle)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserDomainServiceMockRecorder) DeleteUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserDomainService)(nil).DeleteUser), arg0)
}

// FindUserByEmailService mocks base method.
func (m *MockUserDomainService) FindUserByEmailService(email string) (model.UserDomainInterface, *errorsHandle.ErrorsHandle) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmailService", email)
	ret0, _ := ret[0].(model.UserDomainInterface)
	ret1, _ := ret[1].(*errorsHandle.ErrorsHandle)
	return ret0, ret1
}

// FindUserByEmailService indicates an expected call of FindUserByEmailService.
func (mr *MockUserDomainServiceMockRecorder) FindUserByEmailService(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmailService", reflect.TypeOf((*MockUserDomainService)(nil).FindUserByEmailService), email)
}

// FindUserByIDService mocks base method.
func (m *MockUserDomainService) FindUserByIDService(id string) (model.UserDomainInterface, *errorsHandle.ErrorsHandle) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByIDService", id)
	ret0, _ := ret[0].(model.UserDomainInterface)
	ret1, _ := ret[1].(*errorsHandle.ErrorsHandle)
	return ret0, ret1
}

// FindUserByIDService indicates an expected call of FindUserByIDService.
func (mr *MockUserDomainServiceMockRecorder) FindUserByIDService(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByIDService", reflect.TypeOf((*MockUserDomainService)(nil).FindUserByIDService), id)
}

// LoginUserService mocks base method.
func (m *MockUserDomainService) LoginUserService(userDomain model.UserDomainInterface) (model.UserDomainInterface, string, *errorsHandle.ErrorsHandle) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUserService", userDomain)
	ret0, _ := ret[0].(model.UserDomainInterface)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(*errorsHandle.ErrorsHandle)
	return ret0, ret1, ret2
}

// LoginUserService indicates an expected call of LoginUserService.
func (mr *MockUserDomainServiceMockRecorder) LoginUserService(userDomain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUserService", reflect.TypeOf((*MockUserDomainService)(nil).LoginUserService), userDomain)
}

// UpdateUser mocks base method.
func (m *MockUserDomainService) UpdateUser(arg0 string, arg1 model.UserDomainInterface) *errorsHandle.ErrorsHandle {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(*errorsHandle.ErrorsHandle)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserDomainServiceMockRecorder) UpdateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserDomainService)(nil).UpdateUser), arg0, arg1)
}
